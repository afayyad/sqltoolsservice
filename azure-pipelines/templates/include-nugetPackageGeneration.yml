steps:

- task: PowerShell@2
  displayName: 'Generate ManagedBatchParser Nuspec Version'
  inputs:
    targetType: 'inline'
    script: |
      $projectFile = '$(Build.SourcesDirectory)\src\Microsoft.SqlTools.ManagedBatchParser\Microsoft.SqlTools.ManagedBatchParser.csproj'
      $props = New-Object XML
      $props.Load($projectFile)
      $propGroup = $props.Project.PropertyGroup;
      $versionPre = $env:ManagedBatchParserMajor + '.' + $env:ManagedBatchParserMinor + '.'
      if($env:StableRelease.Equals('true')) {
          $version = $versionPre + '0';
      } else {
          $version = $versionPre + $(Build.BuildNumber) + '-' + $propGroup.VersionSuffix.'#text'
      }
      $nuspecFile = '$(Build.SourcesDirectory)\packages\Microsoft.SqlTools.ManagedBatchParser\Microsoft.SqlTools.ManagedBatchParser.nuspec'
      $nuspec = New-Object XML
      $nuspec.Load($nuspecFile)
      $nuspec.package.metadata.version = $version;
      $nuspec.Save($nuspecFile)

- task: Npm@1
  displayName: 'npm install -g gulp-cli'
  inputs:
    command: custom
    verbose: false
    customCommand: 'install -g gulp-cli'

- task: DotNetCoreCLI@2
  displayName: 'dotnet pack sqlcore'
  inputs:
    command: custom
    custom: pack
    arguments: '--output $(Build.SourcesDirectory)\artifacts\nugetPackages --no-build --configuration $(buildConfiguration) -v n src\Microsoft.SqlTools.SqlCore\Microsoft.SqlTools.SqlCore.csproj'

- task: BatchScript@1
  displayName: 'Package nuspec projects'
  inputs:
    filename: build.cmd
    arguments: '-target=NugetPackNuspec -mono'
    
- task: BatchScript@1
  displayName: "Build and Package service tool projects"
  env:
    BUILD_DOTNET_TOOL: "true"
  inputs:
    filename: build.cmd
    arguments: "-target=dotnetpackservicetools -mono"
