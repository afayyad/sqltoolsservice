parameters:
  - name: platforms
    type: object
    default:
    - name: 'osx-x64'
      displayName: 'OSX 64 bit'
      archiveName: 'osx-x64'
      archiveFileFormat: 'tar.gz'
      archiveType: 'tar'
    - name: 'osx-arm64'
      displayName: 'OSX ARM 64 bit'
      archiveName: 'osx-arm64-unsigned'
      archiveFileFormat: 'tar.gz'
      archiveType: 'tar'
    - name: 'win-x64'
      displayName: 'Windows 64 bit'
      archiveName: 'win-x64'
      archiveFileFormat: 'zip'
      archiveType: 'zip'
    - name: 'win-x86'
      displayName: 'Windows 32 bit'
      archiveName: 'win-x86'
      archiveFileFormat: 'zip'
      archiveType: 'zip'
    - name: 'win-arm64'
      archiveName: 'win-arm64'
      displayName: 'Windows ARM 64 bit'
      archiveFileFormat: 'zip'
      archiveType: 'zip'
    - name: 'linux-x64'
      displayName: 'Linux 64 bit'
      archiveName: 'linux-x64'
      archiveFileFormat: 'tar.gz'
      archiveType: 'tar'
    - name: 'linux-arm64'
      archiveName: 'linux-arm64'
      displayName: 'Linux ARM 64 bit'
      archiveFileFormat: 'tar.gz'
      archiveType: 'tar'
  - name: projects
    type: object
    default:
    - 'Microsoft.SqlTools.ServiceLayer'
    - 'Microsoft.SqlTools.Migration'


steps:

- ${{ each project in parameters.projects }}:
  - ${{ each platform in parameters.platforms }}:
    - task: ArchiveFiles@1
      displayName: 'Archive ${{ platform.displayName }} ${{ project }} build'
      inputs:
        rootFolder: '$(Build.SourcesDirectory)/artifacts/publish/${{ project }}/${{ platform.name }}/net8.0'
        includeRootFolder: false
        archiveType: ${{ platform.archiveType }}
        archiveFile: '$(Build.SourcesDirectory)/artifacts/package/${{ project }}-${{ platform.archiveName }}-net8.0.${{ platform.archiveFileFormat }}'
    
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: build archives'
  inputs:
    PathtoPublish: '$(Build.SourcesDirectory)/artifacts/package'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: nuget packages'
  inputs:
    PathtoPublish: '$(Build.SourcesDirectory)/artifacts/nugetPackages'
    ArtifactName: 'packages'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: logs'
  inputs:
    PathtoPublish: '$(Build.SourcesDirectory)/artifacts/logs'
    ArtifactName: 'logs'
  condition: true

- task: NuGetCommand@2
  displayName: 'NuGet push'
  condition: eq(variables['PUSH_SYMBOLS'], 'true')
  inputs:
    command: push
    packagesToPush: '$(Build.SourcesDirectory)/artifacts/nugetPackages/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
    publishVstsFeed: '2191dd5f-4aec-491b-ac50-568bbc331c8a'
    allowPackageConflicts: true

- task: DotNetCoreCLI@2
  displayName: 'NuGet push SqlCore'
  condition: eq(variables['RELEASE_SQLCORE'], 'true')
  inputs:
    command: push
    packagesToPush: '$(Build.SourcesDirectory)/artifacts/nugetPackages/**/Microsoft.SqlTools.SqlCore.*.nupkg'
    feedPublish: 'mssqltools'
    allowPackageConflicts: true

- task: CodeQL3000Finalize@0
  displayName: 'CodeQL Finalize'
  condition: eq(variables['Codeql.enabled'], 'True')

- task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
  displayName: 'Component Detection'
  inputs:
    failOnAlert: true